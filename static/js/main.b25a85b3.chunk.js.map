{"version":3,"sources":["main/components/ui/Logo.js","main/utils/DogAPI.js","main/utils/HttpUtils.js","main/components/BreedSelector.js","main/components/ui/Loader.js","main/components/BreedImageGallery.js","main/App.js","serviceWorker.js","index.js"],"names":["Logo","react_default","a","createElement","className","performApiRequest","url","options","arguments","length","undefined","fetch","Object","objectSpread","headers","Accept","Content-type","then","res","ok","json","console","error","concat","status","statusText","Error","fetchJson","parseApiResponse","data","message","code","getImagesForBreed","breed","subtype","BreedSelector","state","breedList","onBreedSelected","event","selectedBreed","target","value","_this","props","_this2","this","keys","map","name","subtypes","setState","catch","Form_default","Group","controlId","Control","as","onChange","disabled","key","React","Component","Loader","_ref","_ref$show","show","BreedImageGallery","loading","imageList","currentIndex","loadImageList","_selectedBreed$split","split","_selectedBreed$split2","slicedToArray","DogAPI","_this$state","ButtonToolbar","Button","variant","size","onClick","src","alt","ui_Loader","App","debug","ui_Logo","components_BreedSelector","components_BreedImageGallery","Boolean","window","location","hostname","match","view","react_router_dom","basename","process","main_App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b25a85b3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport '../../../res/styles/logo.css';\r\n\r\nfunction Logo() {\r\n  return (\r\n    <section className=\"logo\">\r\n      <span>inu</span>\r\n      <i className=\"dog-icon\"></i>\r\n      <span>pedia</span>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Logo;\r\n","/**\r\n * This module contains a couple of methods that will make it possible to\r\n * interact with the dogs API used by this application.\r\n *\r\n * @module utils/DogAPI\r\n * @author Sara Hernández Suárez <sara.her.su@gmail.com>\r\n */\r\n\r\nimport { fetchJson } from './HttpUtils';\r\n\r\nconst apiBaseUrl = 'https://dog.ceo/api';\r\n\r\nconst useLocalData = true;\r\n\r\n/**\r\n * Make a request to the API and parse the response.\r\n *\r\n * @param url - URL to which the request will be send.\r\n * @param options - Object with request configuration (type of request,\r\n *  data to send along with it and so on)\r\n */\r\nconst performApiRequest = (url, options) => {\r\n  return fetchJson(url, options)\r\n    .then(parseApiResponse);\r\n};\r\n\r\n/**\r\n * Handle API response format to identify errors and throw exceptions if needed\r\n *\r\n * @param data - JSON data obtained as a response to a request.\r\n */\r\nconst parseApiResponse = (data) => {\r\n  if (data.status === 'success') {\r\n    return data.message;\r\n  } else {\r\n    console.error(`API returned error ${data.code} - ${data.message}`);\r\n    throw new Error(data.message);\r\n  }\r\n};\r\n\r\n/**\r\n * Obtain the list of dog breeds.\r\n * @returns {Promise} Promise object with a collection of breeds.\r\n */\r\nexport const getBreedList = () => {\r\n  const url = useLocalData\r\n    ? `data/breeds.json`\r\n    : `${apiBaseUrl}/breeds/list/all`;\r\n\r\n    return performApiRequest(url)\r\n    .then(data => Object.keys(data)\r\n      .map(breed => ({ name: breed, subtypes: data[breed] })));\r\n};\r\n\r\n/**\r\n * Obtain a list of images for an specific breed.\r\n * @param {string} breed\r\n * @param {string} subtype\r\n * @returns {Promise} Promise object with an array of image URLs.\r\n */\r\nexport const getImagesForBreed = (breed, subtype) => {\r\n  let subtypePath = subtype ? `/${subtype}` : ``;\r\n  const url = useLocalData\r\n    ? `data/images.json`\r\n    : `${apiBaseUrl}/breed/${breed}${subtypePath}/images`;\r\n\r\n  return performApiRequest(url);\r\n};\r\n","/**\r\n * Call `fetch` to perform a request that will both receive and send a JSON\r\n * object.\r\n *\r\n * This also handles HTTP errors, so the promise is rejected if the request\r\n * obtained an error code instead of a 200 (OK).\r\n *\r\n * @author Sara Hernández Suárez <sara.her.su@gmail.com>\r\n *\r\n * @param url - URL to request.\r\n * @param options - Object to customize the request. It's an optional value.\r\n *\r\n * @return A promise object resolved with a JSON response.\r\n * @throws Error object with a message describing the issue.\r\n */\r\nexport const fetchJson = (url, options = {}) => {\r\n  const headers = {\r\n    'Accept': 'application/json',\r\n    'Content-type': 'application/json'\r\n  };\r\n\r\n  return fetch(url, { headers, ...options })\r\n    .then((res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      } else {\r\n        console.error(`HTTP request failed with code ${res.status} - ${res.statusText}`);\r\n        throw new Error(res.statusText);\r\n      }\r\n    });\r\n};\r\n","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport * as DogAPI from '../utils/DogAPI';\r\n\r\nclass BreedSelector extends React.Component {\r\n\r\n  state = {\r\n    breedList: []\r\n  };\r\n\r\n  componentWillMount() {\r\n    DogAPI.getBreedList()\r\n      .then((breedList) => this.setState({ breedList }))\r\n      .catch(console.error);\r\n  }\r\n\r\n  onBreedSelected = (event) => {\r\n    const selectedBreed = event.target.value;\r\n    this.props.onBreedSelected(selectedBreed);\r\n  };\r\n\r\n  render() {\r\n    const { breedList } = this.state;\r\n    const { selectedBreed } = this.props;\r\n\r\n    return (\r\n      <Form.Group controlId=\"breedSelector\" className=\"breed-selector\">\r\n        <Form.Control as=\"select\" value={selectedBreed} onChange={this.onBreedSelected}>\r\n          <option value=\"\" className=\"placeholder\" disabled>- Choose a breed -</option>\r\n          {breedList.map(breed => {\r\n            if (breed.subtypes.length > 0) {\r\n              return breed.subtypes.map(subtype => (\r\n                <option key={`${breed.name}-${subtype}`} value={`${breed.name}-${subtype}`}>\r\n                  {subtype} {breed.name}\r\n                </option>\r\n              ));\r\n            } else {\r\n              return (\r\n                <option key={breed.name} value={breed.name}>\r\n                  {breed.name}\r\n                </option>\r\n              );\r\n            }\r\n          })}\r\n        </Form.Control>\r\n      </Form.Group>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default BreedSelector;\r\n","import React from 'react';\r\n\r\nimport '../../../res/styles/loader.css';\r\n\r\nfunction Loader({ show = true, message }) {\r\n  return !show ? null : (\r\n    <div className=\"loader-wrapper\">\r\n      <div className=\"loader-container\">\r\n        <i className=\"loading-icon\"></i>\r\n        <p className=\"loading-text\">Loading...</p>\r\n        { message && (\r\n          <p className=\"loading-details\">{message}</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\nimport { ButtonToolbar, Button } from 'react-bootstrap';\r\n\r\nimport * as DogAPI from '../utils/DogAPI';\r\n\r\nimport Loader from './ui/Loader';\r\n\r\nclass BreedImageGallery extends React.Component {\r\n\r\n  state = {\r\n    loading: false,\r\n    imageList: [],\r\n    currentIndex: 0\r\n  };\r\n\r\n  componentWillMount() {\r\n    const { selectedBreed } = this.props;\r\n\r\n    if (selectedBreed) {\r\n      this.loadImageList(selectedBreed);\r\n    }\r\n\r\n  }\r\n\r\n  loadImageList = (selectedBreed) => {\r\n    const [ breed, subtype ] = selectedBreed.split(\"-\");\r\n\r\n    this.setState({ loading: true });\r\n    DogAPI.getImagesForBreed(breed, subtype)\r\n      .then((imageList) => this.setState({ imageList }))\r\n      .catch(console.error)\r\n      .then(this.setState({ loading: false }));\r\n  };\r\n\r\n  render() {\r\n    const { loading, imageList, currentIndex } = this.state;\r\n\r\n    return (\r\n      <section className=\"breed-gallery\">\r\n\r\n        {/* --- Search results --- */}\r\n        {imageList.length > 0 && (\r\n          <div className=\"search-results\">\r\n            <ButtonToolbar>\r\n              <Button variant=\"primary\" size=\"sm\" className=\"prev\"\r\n                onClick={() => this.setState({ currentIndex: currentIndex - 1 })}\r\n                disabled={currentIndex <= 0}>🡰 <span>Previous</span></Button>\r\n              <Button variant=\"warning\" size=\"sm\" className=\"next\"\r\n                onClick={() => this.setState({ currentIndex: currentIndex + 1 })}\r\n                disabled={currentIndex >= imageList.length - 1}><span>Next</span> 🡲</Button>\r\n            </ButtonToolbar>\r\n\r\n            <img src={imageList[currentIndex]} alt=\"\" />\r\n          </div>\r\n        )}\r\n\r\n        {/* --- No results message --- */}\r\n        {imageList.length === 0 && (\r\n          <div className=\"no-results\">\r\n            <i className=\"icon\"></i>\r\n            <p className=\"text\">No images available to display</p>\r\n          </div>\r\n        )}\r\n\r\n        {/* --- Loader --- */}\r\n        {loading && (\r\n          <Loader show={loading} message=\"Wait a second, we're looking for images.\" />\r\n        )}\r\n\r\n      </section>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default BreedImageGallery;\r\n","import React from 'react';\r\n\r\nimport Logo from './components/ui/Logo';\r\nimport BreedSelector from './components/BreedSelector';\r\nimport BreedImageGallery from './components/BreedImageGallery';\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    selectedBreed: ''\r\n  };\r\n\r\n  onBreedSelected = (selectedBreed) => {\r\n    console.debug(`Selected breed changed to ${selectedBreed}`);\r\n    this.setState({ selectedBreed });\r\n  };\r\n\r\n  render () {\r\n    const { selectedBreed } = this.state;\r\n\r\n    return (\r\n      <main>\r\n        <header>\r\n          <Logo />\r\n\r\n          {/* --- Breed selector --- */}\r\n          <BreedSelector\r\n            selectedBreed={selectedBreed}\r\n            onBreedSelected={this.onBreedSelected} />\r\n        </header>\r\n\r\n        {/* --- Image gallery --- */}\r\n        <BreedImageGallery\r\n          key={selectedBreed}\r\n          selectedBreed={selectedBreed} />\r\n\r\n      </main>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport App from './main/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport './res/styles/index.css';\r\n\r\nconst view = (\r\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n    <App />\r\n  </BrowserRouter>\r\n);\r\n\r\nReactDOM.render(view, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}